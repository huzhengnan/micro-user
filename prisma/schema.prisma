generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String            @id @default(uuid())
  username          String            @unique
  email             String            @unique
  password          String?
  role              Role              @default(USER)
  isEmailVerified   Boolean           @default(false)
  emailVerifyToken  String?           @unique
  emailVerifyExpiry DateTime?
  avatar            String?           // 头像URL
  sourceId          String?           // 来源网站ID
  source            Source?           @relation(fields: [sourceId], references: [id])
  points            Int               @default(0)  // 将balance改为points，类型改为Int
  subscriptions     Subscription[]    // 用户订阅关系
  oauthAccounts     OAuthAccount[]    // 第三方登录账号
  featureUsages     FeatureUsage[]    // 用户功能使用记录
  userContents      UserContent[]     // 用户生成的内容
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum Role {
  USER
  ADMIN
}

// 来源网站模型
model Source {
  id          String   @id @default(uuid())
  name        String   @unique // 来源网站名称
  domain      String   @unique // 域名
  apiKey      String?  // API密钥
  users       User[]   // 该来源的用户
  featureCosts FeatureCost[] // 该来源网站的功能扣费配置
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 订阅计划模型
model SubscriptionPlan {
  id           String         @id @default(uuid())
  name         String         // 订阅计划名称
  description  String?        // 描述
  price        Int            // 订阅价格（货币单位，如元）
  monthlyPoints Int           // 每月赠送积分数量
  duration     Int            // 持续时间(天)
  features     String[]       // 功能列表
  subscriptions Subscription[] // 订阅关系
  paymentMappings PaymentProductMapping[] // 支付产品映射
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// 用户订阅关系模型
model Subscription {
  id                String           @id @default(uuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId            String
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  startDate         DateTime         @default(now())
  endDate           DateTime
  isActive          Boolean          @default(true)
  autoRenew         Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([userId, planId])
}

// 第三方登录账号模型
model OAuthAccount {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String   // 提供商: google, github, facebook等
  providerId   String   // 提供商提供的ID
  accessToken  String?  // 访问令牌
  refreshToken String?  // 刷新令牌
  expiresAt    DateTime? // 令牌过期时间
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider, providerId])
}

// 交易记录模型
model Transaction {
  id          String          @id @default(uuid())
  userId      String
  amount      Int             // 将amount类型改为Int
  type        TransactionType
  status      TransactionStatus @default(COMPLETED)
  description String?
  metadata    Json?           // 额外元数据
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum TransactionType {
  TOPUP       // 充值积分（原DEPOSIT）
  REDEEM      // 兑换/消费积分（原WITHDRAWAL）
  SUBSCRIPTION // 订阅支付
  REFUND      // 退款
  EARN        // 新增：通过活动等方式赚取积分
  EXPIRE      // 新增：积分过期
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// 支付产品映射模型
model PaymentProductMapping {
  id              String           @id @default(uuid())
  subscriptionPlanId String         // 关联的订阅计划ID
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  paymentProvider  PaymentProvider  // 支付提供商
  productId        String           // 支付平台上的产品ID
  priceId          String?          // 支付平台上的价格ID（某些平台如Stripe区分product和price）
  active           Boolean          @default(true) // 是否激活
  metadata         Json?            // 额外元数据
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([subscriptionPlanId, paymentProvider])
}

// 支付提供商枚举
enum PaymentProvider {
  CREEM
  STRIPE
  PAYPAL
  ALIPAY
  WECHAT
  // 可以根据需要添加更多支付提供商
}

// 功能扣费模型
model FeatureCost {
  id          String   @id @default(uuid())
  featureKey  String   // 功能唯一标识符
  name        String   // 功能名称
  description String?  // 功能描述
  pointsCost  Int      // 消耗的积分数量
  sourceId    String?  // 来源网站ID
  source      Source?  @relation(fields: [sourceId], references: [id])
  isActive    Boolean  @default(true) // 是否激活
  metadata    Json?    // 额外元数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 功能使用记录
  usageRecords FeatureUsage[]

  @@unique([featureKey, sourceId])
}

// 功能使用记录模型
model FeatureUsage {
  id            String   @id @default(uuid())
  userId        String   // 用户ID
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  featureCostId String   // 功能扣费ID
  featureCost   FeatureCost @relation(fields: [featureCostId], references: [id])
  pointsUsed    Int      // 使用的积分数量
  transactionId String?  // 关联的交易记录ID
  metadata      Json?    // 额外元数据，可以存储使用详情
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 用户生成内容模型
model UserContent {
  id          String      @id @default(uuid())
  userId      String      // 用户ID
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ContentType // 内容类型
  title       String      // 内容标题
  description String?     // 内容描述
  prompt      String      // 用户输入的提示词
  result      String      // 生成的结果（URL或文本）
  status      ContentStatus @default(COMPLETED) // 内容状态
  pointsUsed  Int         // 使用的积分
  isPublic    Boolean     @default(false) // 是否公开到画廊
  sourceId    String?     // 来源网站ID
  likes       Int         @default(0) // 点赞数
  views       Int         @default(0) // 浏览数
  metadata    Json?       // 额外元数据
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId, createdAt])
  @@index([isPublic, createdAt])
  @@index([type, isPublic])
  @@index([sourceId, isPublic])
}

// 内容类型枚举
enum ContentType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  WORK_TRANSLATION
}

// 内容状态枚举
enum ContentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// 异步任务模型
model AsyncTask {
  id          String      @id @default(uuid())
  userId      String      // 用户ID
  taskType    TaskType    // 任务类型
  status      TaskStatus  @default(PENDING) // 任务状态
  input       Json        // 输入参数
  result      Json?       // 任务结果
  error       String?     // 错误信息
  attempts    Int         @default(0) // 重试次数
  maxAttempts Int         @default(3) // 最大重试次数
  scheduledAt DateTime    @default(now()) // 计划执行时间
  startedAt   DateTime?   // 开始执行时间
  completedAt DateTime?   // 完成时间
  metadata    Json?       // 额外元数据
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status, scheduledAt])
  @@index([userId, taskType])
}

// 任务类型枚举
enum TaskType {
  WORK_TRANSLATION
  TEXT_GENERATION
  IMAGE_GENERATION
  AUDIO_GENERATION
  VIDEO_GENERATION
}

// 任务状态枚举
enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
